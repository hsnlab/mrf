#+INCLUDE: header.org

* Notes

** Config RSS
#+begin_src bash
ethtool --config-nfc enp7s0 rx-flow-hash udp4 sdfn
ethtool --config-nfc enp7s0 rx-flow-hash tcp4 sdfn
#+end_src

** Caveats
- good to remember: the pcap we generate contains only a single flow per rule -- good case for MRF
- classbench generates lots of invalid rules (multicast) that gets dropped by the kernel

* Results

** classbench 1663 rules, 1663 flows, multiple cpus, DEBUG off
#+TBLNAME:plot-1663
| core | rate mtf [mbps] | rate default [mbps] |
|------+-----------------+---------------------|
|   23 |            4516 |                1065 |
|   20 |            4148 |                 992 |
|   18 |            3830 |                 946 |
|   16 |            3686 |                 917 |
|   14 |            3298 |                 884 |
|   12 |            3072 |                 828 |
|   10 |            2345 |                 705 |
|    8 |            1670 |                 565 |
|    6 |            1075 |                 424 |
|    4 |             541 |                 285 |
|    2 |             162 |                 141 |
|    1 |              54 |                  71 |
#+begin_src gnuplot :var data=plot-1663 :exports results :file plot-1663rules-1663flows-2.png
  reset
  set size 1,1
  set xrange [0:24]
  set xlabel "cores"
  set ylabel "rate [mbps]"
  set title "1663 classbench rules and 1663 flows"
  amdahl(x) = 27.28 / (.005 + ((1-0.005)/(x**2.188)))
  plot data u 1:2 w lp lw 2 title 'rate MRF', \
       data u 1:3 w lp lw 2 title 'rate DEF', \
       amdahl(x) w line lw 2 title 'amdahl (fitted)'
#+end_src

#+RESULTS:
[[file:plot-1663rules-1663flows-2.png]]

#+begin_src python :var data=plot-1663 :results output
  import numpy as np
  import matplotlib.pyplot as plt
  from scipy.optimize import curve_fit
  import pandas as pd

  def SuperLinearAmdahl(x, *params):
    return params[2] / (params[0] + (1-params[0])/pow(x, params[1]))

  D = pd.DataFrame(data)
  parameters, covariance = curve_fit(SuperLinearAmdahl, D[0].to_numpy(), D[1].to_numpy(), [0.5,1,1])
  print(f"lambda={parameters[2]}, s={parameters[0]}, alpha={parameters[1]}")
#+end_src

#+RESULTS:
: lambda=27.288137575924967, s=0.005112812866432528, alpha=2.188312150213951

* TODOs
- parameters to measure:
  - raw throughput (=trex=)
  - measure cache miss rate (=perf=)
  - measure working set size (=mrf-tool=)
- benchmarks
  - artificial traffic:
    - diff configs:
      - #nft rules: small / medium / large ruleset
  - realistic traffic:
    - classbench flows:
      - small / medium / large ruleset
      - vary smoothness (1, 8, 16, 32, 64) to control rule dependencies
    - add random udp packets to make sure some packets hit the default catch-all rule
  - single-cpu scaling with multiple threads: difficult to measure, maybe we can get away with the
    simulations
